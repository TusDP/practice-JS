//=========================
///////////////\\\\\\\\\\\\
////////–ú–æ–¥—É–ª—å ‚Ññ2 —á.1\\\\\\\
////////////////////////////
//=========================


//   index     0      1      2     3       4
// const myArray = [1, 'Hello', null, true, [1, 2, 3]];
//             1      2      3     4       5

// console.log(Array.isArray(myArray));
//Array.isArray(myArray) - –ø–æ–≤–µ—Ä—Ç–∞—î  true/false  –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–æ–≥–æ, —á–∏ –º–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑ –º–∞—Å–∏–≤–æ–º —á–∏ –Ω—ñ


// Example "For" loop

// for(let i = 0; i < myArray.length; i += 1) {
//   if (Array.isArray(myArray[i])) {
//     for (let j =0; j < myArray[i].length; j += 1) {
//       console.log(myArray[i][j]);
//     }
//   }
//   console.log(myArray[i]);
// }




// Example "For of" loop

// for(let item of myArray) {
//   if (typeof item === 'string'){
//     item = false
//   }
// } 
// console.log('for of', myArray);

// for(let i = 0; i < myArray.length; i += 1) {
//   if (typeof myArray[i] === 'number') {
//     myArray[i] = false;
//   }
// }
// console.log('for', myArray);

// let i = 0;

// while(i < myArray.length) {
//   console.log(myArray[i]);
//   i += 1
// }


//==========[[–ú–µ—Ç–æ–¥–∏  –º–∞—Å–∏–≤—É]]=========

//Split()    Join()

// const str = 'Hello world Im learning JS'

// //                  –¥–µ–ª—ñ–º–µ—Ç—Ä
// const arr = str.split(' '); // –æ–±'—î–¥–Ω—É—î —Å—Ç—Ä—ñ–Ω–≥—É –≤ –º–∞—Å–∏–≤
// const result = arr.reverse().join('-') // —Ä–æ–±–∏—Ç—å —Ä–µ–≤–µ—Ä—Å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É, –∑ –º–∞—Å–∏–≤—É —Ä–æ–±–∏—Ç—å —Å—Ç—Ä—ñ–Ω–≥

// console.log(str);
// console.log(arr);
// console.log(result );


//====================

// IndexOf()     Includes()

// const arr = ['hello', 'world', 'I','learning', 'JS'];
// const indx = arr.indexOf('qdqdwq'); // –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –¥–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å–∏–≤—ñ

// // —è–∫ —Ä–∞–Ω—ñ—à–µ —Ä–æ–±–∏–ª–∞—Å—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–º—ñ—Å—Ç –µ–ª–µ–º–µ–Ω—Ç—É –≤ –º–∞—Å–∏–≤—ñ:

// if (arr.indexOf('Phyton') === -1) {
//   console.log('NO');
// } else {
//   console.log('YES');
// }

// // —è–∫ —Ä–æ–±–∏—Ç—å—Å—è –∑–∞—Ä–∞–∑ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é includes()

// if (arr.includes('Phyton')) {
//   console.log('YES');
// } else {
//   console.log('NO');
// }

//=====================



//  –ú–µ—Ç–æ–¥–∏ 
//   push(+)   pop(-)  - –¥–æ–¥–∞—î —Ç–∞ –≤–∏–¥–∞–ª—è—î –µ–ª–µ–º–µ–Ω—Ç–∏ –≤–∫—ñ–Ω—Ü—ñ –º–∞—Å–∏–≤—É 
// const arr = ['hello', 'world', 'I','learning', 'JS'];

// arr.push(1, 45 ,14);
// console.log(arr);
// arr.pop()  //
// arr.pop()  // –í–∏–¥–∞–ª—è—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ù–µ –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏, —è–∫–∏–π —Å–∞–º–µ.
// arr.pop()  // –©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ —É—Å—ñ –∑–∞–ø—É—à–µ–Ω—ñ —á–∏—Å–ª–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ 3 —Ä–∞–∑–∏.
// console.log(arr);

//   unshift(+)    shift(-)  - –¥–æ–¥–∞—î —Ç–∞ –≤–∏–¥–∞–ª—è—î –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –º–∞—Å–∏–≤—É 

// arr.unshift(1, 'work',[2,3])
// console.log(arr);
// arr.shift()
// arr.shift()
// arr.shift()
// console.log(arr);

// slice () - –≤—ñ—Ä—ñ–∑–∞—î –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –º–∞—Å–∏–≤—É, —Ç–∞ —Ä–æ–±–∏—Ç—å –∫–æ–ø—ñ—é –Ω–µ –∑–º—ñ–Ω—é—é—á–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª. –º–∞—Å–∏–≤

// const result = arr.slice(1,3);
// console.log(result);
// console.log(arr);


// –º–µ—Ç–æ–¥ splice()  - —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥(–¥–æ–¥–∞—î, –≤–∏–¥–∞–ª—è—î, –∑–∞–º—ñ–Ω—é—î –µ–ª–µ–º–µ–Ω—Ç–∏)


// arr.splice(1,0, 'from');
// console.log(arr);

// const indx = arr.indexOf('world');
// const reslt = arr.splice(indx, 1, 'Ukraine');
// console.log(arr);
// console.log('result', reslt);


// –º–µ—Ç–æ–¥ concat()   -  –ø–æ—î–¥–Ω—É—î –¥–µ–∫—ñ–ª—å–∫–∞ –º–∞—Å–∏–≤—ñ–≤ –≤ –æ–¥–∏–Ω

// const arr1 = [1, 2, 3];
// const arr2 = [4, 5,6];
// const arr3 = [7, 8];

// const result = arr1.concat(arr2, arr3);
// console.log(arr1);
// console.log(result);

//============================
//   –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è   ====
//============================


// Example #1


// const genres = ['Jazz', 'Blues'];
// // –î–æ–¥–∞—Ç–∏ –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É –µ–ª–µ–º–µ–Ω—Ç:
// genres.push('Rock-n-Roll');
// console.log(genres);
// //–í–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É
// console.log(genres[0]);
// console.log(genres[genres.length -1]);
// //–í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –Ω–∞ –≤–∏–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
// console.log(genres.shift());
// // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É
// genres.unshift('Country','Reggae');
// console.log(genres);


// //  –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É splice():
// const genres = ['Jazz', 'Blues'];
// // –î–æ–¥–∞—Ç–∏ –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É –µ–ª–µ–º–µ–Ω—Ç:
// genres.splice(genres.length, 0,'Rock-n-Roll');
// console.log(genres);
// //–í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –Ω–∞ –≤–∏–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å:
// console.log(genres.splice(0, 1)); 
// // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É:
// genres.splice(0, 0, 'Country','Reggae');
// console.log(genres);



// Example #2

// const values = '8 11';
// const arr = values.split(' ');

// const resultS = arr[0] * arr[1];
// console.log(typeof resultS, resultS);



//Example #3

const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

//var #1
// for (let i = 0; i < fruits.length; i += 1) {
//   console.log(`${i + 1} - ${fruits[i]}`);
// }

//var #2
// for(let i = 0, n = 1; i < fruits.length; i += 1, n += 1) {
//   console.log(`${n} - ${fruits[i]}`);
// }

//var #3 wirh "For of" loop
// let counter = 1;
// for(fruit of fruits) {
//   console.log(counter, fruit);
//   counter++
// }




// Example 4 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏
//   –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. 
//   –£ –∑–º—ñ–Ω–Ω–∏—Ö names —Ç–∞ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. 
//   –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. 
//   –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// let names = 'Jacob,William,Solomon,Artem';
// let phones = '89001234567,89001112233,890055566377, 890055421458';

// names = names.split(',');
// console.log(names);
// phones = phones.split(',');
// console.log(phones);

// for (i = 0; i < names.length; i += 1) {
//   console.log(`${names[i]} - ${phones[i]}`);
// }

// —è–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É –º–∞—Å–∏–≤–∞—Ö –Ω–µ –æ–¥–Ω–∞–∫–æ–≤–∞, –≤–∏–∫–æ–Ω—É—î–º–æ –ø–æ–¥–≤—ñ–π–Ω—É —É–º–æ–≤—É:
// let names = 'Jacob,William,Solomon,Artem';
// let phones = '89001234567,89001112233,890055566377'; // —è–∫ –±–∞—á–∏–º–æ, –≤ –¥—Ä—É–≥–æ–º—É –º–∞—Å–∏–≤—ñ —Ç—ñ–ª—å–∫–∏ 3 –Ω–æ–º–µ—Ä–∏, –∞ —ñ–º–µ–Ω 4

// names = names.split(',');
// console.log(names);
// phones = phones.split(',');
// console.log(phones);

// //                    –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–±–∏–º–æ –ø–æ–¥–≤—ñ–π–Ω—É —É–º–æ–≤—É
// //                                   |
// //                                   V 
// for (i = 0; i < names.length, i < phones.length; i += 1) {
//   console.log(`${names[i]} - ${phones[i]}`);
// }




// Example 5 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ.
// –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Å–∏–º–≤–æ–ª –ø—Ä–æ–±—ñ–ª—É. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.

// const string = 'Welcome to the future';
// const strArray = string.split(' ');
// console.log(strArray);
// const newArray = strArray.slice(1, strArray.length -1);
// console.log(newArray);
// const result = newArray.join(' ');
// console.log(result);


// //—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫:
// const result = string.split(' ').slice(1, -1).join(' ');
// console.log(result);




// Example 6 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const string = 'Welcome to the future';

// const result = string.split('').reverse().join('');
// console.log(result);




// Example 7 - –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —ñ–∑ —Ü–∏–∫–ª–æ–º
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —Ä—è–¥–∫—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–∞ –ø–µ—Ä—à–æ—é –ª—ñ—Ç–µ—Ä–æ—é –µ–ª–µ–º–µ–Ω—Ç–∞.

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];

// let arr = [];
// for (let i = 0; i < langs.length; i += 1) {
//   // console.log(langs[i][0]);

//   if(langs[0] > langs[i]) {
//     console.log(langs[i]);
//   }
// }
// console.log(arr);





// Example #8
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. 
// –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. 
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.

// const numbers = [94, 298, 17, 94, 110, 23, 37, 14, 12, 25, 11];

// let minNumber = numbers[0];

// for (number of numbers) {
//   if (number < minNumber) {
//     minNumber = number;
//   }
// }
// console.log(minNumber);

//===========
// const arr = [1,2,3] + [6,7]
// console.log(typeof arr); 





//=========================
///////////////\\\\\\\\\\\\
////////–ú–æ–¥—É–ª—å ‚Ññ2 —á.2\\\\\\\
////////////////////////////
//=========================


// const arr1 = [1,2,3,4];
// const arr2 = [5,6,7,8];
// const arr3 = [9,10,11,12];

// function arrayMultiplication (arr) {
//   for(let i = 0; i < arr.length; i += 1) {
//     arr[i] *= 2;
//   }
//   console.log(arr)
// }

// arrayMultiplication(arr1)
// arrayMultiplication(arr2)
// arrayMultiplication(arr3)

//============

// ((((((((((Function declaration)))))))))))))) 

// function name (parameter){
// } 
//======

// (((((((((((((Function expression)))))))))))))

// const name = function (parameter) {

// }
//==========


// function add(val1, val2, val3, val4, val5, val6) {
//   console.log(val1 + val2 + val3 + val4 + val5 + val6);
// }

// add(1,2,3,4,5,6)
// add(1,2,3,4) 
// add(1,2,3,4,5)

// –Ü–∑–∑–∞ —Ç–æ–≥–æ, —â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 4, –∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó 6, –æ—Å—Ç–∞–Ω–Ω—ñ –¥–≤–∞ –±—É–¥—É—Ç—å undefined.
// –©–æ–± —Ü—å–æ–≥–æ —É–Ω–∏–∫–Ω—É—Ç–∏, —Ç—Ä–µ–±–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ø–∏—Å–∞—Ç–∏ "arguments"

// function add() {
//   console.log(arguments);
//   let sum = 0;
//   // for(let i = 0; i < arguments.length; i += 1) {
//   //   sum += arguments[i]
//   // }

//   for (argument of arguments) {
//     sum += argument;
//   }
//   console.log(sum);
// }

// add(1,2,3,4,5,6)
// add(1,2,3,4) 
// add(1,2,3,4,5)


//========================

// –º–æ–∂–Ω–∞ –∑–∞–¥–∞–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, –∫–æ–ª–∏ –Ω–µ –Ω–∞—î–º–æ —Ç–æ—á–Ω–æ —Å–∫—ñ–ª—å–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
// function add (val1, val2 = 0) {
//   return val1 + val2
// }

// console.log(add(3,4));
// console.log(add(5));
// console.log(add(11));

//========================

// let a = 10;

// function foo() {
//   a = 15
// }
// foo()
// console.log(a);

// let b = 10;

// function foo1() {
//   let b = 15;
// }

// console.log(b);
//======================================











// Example 1 - –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calcBMI(weight, height) —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏. 
// –î–ª—è —Ü—å–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –≤–∏—Å–æ—Ç–∏ –ª—é–¥–∏–Ω–∏ –≤ –º–µ—Ç—Ä–∞—Ö.
// –í–∞–≥–∞ —Ç–∞ –≤–∏—Å–æ—Ç–∞ –±—É–¥—É—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —è–∫ —Ä—è–¥–∫–∏. –ù–µ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ 24.7 –∞–±–æ 24,7, —Ç–æ–±—Ç–æ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–º–∞.
// –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –æ–¥–Ω—ñ—î—ó —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫—Ä–∞–ø–∫–∏;

// function calcBMI (weight, height) {
//   weight = Number(weight.replace(',', '.'));
//   height = Number(height.replace(',', '.'));
//   // const bmiResult = weight / height ** 2  
//   return Number((weight / Math.pow(height, 2)).toFixed(1))
// }

// const bmi = calcBMI('88,3', '1.75');
// console.log(bmi);  //28.8




// Example 2 - –ù–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é min(a,b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a —Ç–∞ b.

// function min (a, b) {
//   // if (a < b) {
//   //   return a
//   // } 
//   // return b

//   //–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–µ—Ä–Ω–∞—Ä–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:
//   return (a < b) ? a : b;  
// }

// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1


// Example 3 - –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, 
// –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dimensions —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. 
// –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// function getRectArea(dimensions) {
//   dimensions = dimensions.split(' ');
//   const resultArea = dimensions[0] * dimensions[1];
//   return resultArea;
// }

// console.log(getRectArea('8 11'));
// console.log(getRectArea('46 11'));
// console.log(getRectArea('8 112'));



// Example 4 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ 
// –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª for, —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É 
// –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ 
// <–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞> - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>. 
// –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

// –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É 
// ['Mango', 'Poly', 'Ajax'] –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ 1 - Mango, –∞
//  –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 - "Poly" –≤–∏–≤–µ–¥–µ 3 - Ajax.

// function logItems(items) {
//   for (let i = 0, num = 1; i < items.length; i += 1, n += 1) {
//     console.log(`${num} - ${items[i]}`);
//   }
// }

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);



// Example 5 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é printContactsInfo(names, phones) —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å 
// —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. 
// –£ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ names —Ç–∞ phones –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö
// –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. 
// –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. 
// –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// function printContactsInfo(names, phones) {
//   names = names.split(',');
//   phones = phones.split(',');
//   for (i = 0; i < names.length; i += 1) {
//     console.log(`${names[i]} - ${phones[i]}`);
//   }
// }


// printContactsInfo(
//     'Jacob,William,Solomon,Artem',
//     '89001234567,89001112233,890055566377,890055566300'
// );



// Example 6 - –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLargestNumber(numbers)—è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ 
// –∑ —á–∏—Å–µ–ª.


// function findLargestNumber () {
//   // const arr = Array.from(arguments);
//   const arrSpread = [...arguments];

// let max = arrSpread[0];
// for (const number of arrSpread) {
//   if (number > max) {
//     max = number
//   }
// }
// return max
// }

// console.log(findLargestNumber(2, 17, 94, 1, 23, 37)); // 94
// console.log(findLargestNumber(49, 4, 7, 83, 12));  // 83



/////////////////////////////////
// –¢–†–ï–ë–ê –†–û–ó–Ü–ë–†–ê–¢–ò –©–ï!!!!!!//////
/////////////////////////////////


// function findLargestNumber () {
//   let max;
//   for (const element of arguments) {
//     if (typeof element === 'number') {
//       max = element;
//       break
//     }
//   }
//   for (const element of arguments) {
//     if (typeof element === 'number') {
//       if (element > max) {
//         max = element
//       }
//     } else {
//     max = findLargestNumber(...element)
//     }
//   }
//   return max
// }

// console.log(findLargestNumber([1, 1753, 7, 9], 6, 12, 4, 123, 88, 8));


// Example 7 - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calAverage() —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è. 
// –£—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å –ª–∏—à–µ —á–∏—Å–ª–∞–º–∏.

// function calAverage() {
//   let total = 0;
//   let middle;
//   for (number of arguments) {
//     total += number;
//   }
//   middle = total / arguments.length;
//   return middle
// }

// console.log(calAverage(1, 2, 3, 4)); // 2.5
// console.log(calAverage(14, 8, 2)); // 8
// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2



// Example 8 - –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é formatTime(minutes) 
// —è–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è minutes (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω) —É —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–¥–∏–Ω —Ç–∞ —Ö–≤–∏–ª–∏–Ω HH:MM.

// function formatTime(minutes) {
//   const hours = Math.floor(minutes / 60);
//   const mints = minutes % 60;
//   return `${hours.toString().padStart(2, 0)} : ${mints.toString().padStart(2, 0)}`
// }

// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01"




// Example 9 - –ö–æ–ª–µ–∫—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ (includes, indexOf, push —ñ —Ç. –¥.)
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ courses:

// addCourse(name) - –¥–æ–¥–∞—î –∫—É—Ä—Å –¥–æ –∫—ñ–Ω—Ü—è –∫–æ–ª–µ–∫—Ü—ñ—ó
// removeCourse(name) - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
// updateCourse(oldName, newName) - –∑–º—ñ–Ω—é—î —ñ–º'—è –Ω–∞ –Ω–æ–≤–µ


const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];

function addCourse(course) {
  if (courses.indexOf(course) === -1) {
    courses.push(course)
  } else {
    console.log('–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å');
  }
}

addCourse('Express');
console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
addCourse('CSS'); // '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å'


/* –í–∞—Ä—ñ–∞–Ω—Ç ‚Ññ1 ///
*/ ///
function removeCourse(course) {
  if (courses.includes(course)) {
    const idx = courses.indexOf(course)
    courses.splice(idx, 1);
    return
  } else {
    return "–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";
  }
}


/* –í–∞—Ä—ñ–∞–Ω—Ç ‚Ññ2 ///
*/ ///
// function removeCourse(course) {
//   const idx = courses.indexOf(course);
//   console.log(idx);
// }............................. to be continue


// removeCourse('React');
// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
// console.log(removeCourse('Vue'));; // '–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'



function updateCourse(oldCourse, newCourse) {
  if (courses.includes(oldCourse)) {
    const idx = courses.indexOf(oldCourse);
    courses.splice(idx, 1, newCourse)
    return
  }
}

updateCourse('JavaScript', 'NestJS');
console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']
console.log(updateCourse('JavaScript', 'NestJS'));
